generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User table: Stores users with roles (ADMIN, USER, PROJECT_LEAD)
model User {
  id                Int             @id @default(autoincrement())
  email             String          @unique
  password          String?
  firstName         String
  lastName          String
  role              UserRole        @default(USER)
  createdAt         DateTime        @default(now())
  projects          Project[]
  googleCredential  String?         @unique

  @@map("user")
}

// Enum for user roles
enum UserRole {
  ADMIN
  USER
  PROJECT_LEAD
}

// Project table: Holds individual projects created by users
model Project {
  id               Int             @id @default(autoincrement())
  name             String
  evaluations      Evaluation[]
  userId           Int
  createdAt        DateTime        @default(now())
  owner            User            @relation(fields: [userId], references: [id])

  @@map("project")
}

// Evaluation table: Represents evaluations associated with projects
model Evaluation {
  id               Int             @id @default(autoincrement())
  project          Project         @relation(fields: [projectId], references: [id])   
  projectId        Int
  description      String          @default("")
  score          Float[]         // Array to hold scores per layer
  answers          Answer[]
  startTime        DateTime        @default(now())
  lastUpdateTime   DateTime        @updatedAt
  completedLayers  Int             @default(0) // Tracks layers completed (e.g., 1 = completed)

  @@map("evaluation")
}
// Layer table: Represents hierarchical layers with associated weights
model Layer {
  id               Int             @id @default(autoincrement())
  name             String
  order            Int             // Layer hierarchy level (1, 2, 3)
  weight           Float           @default(0)
  principles       Principle[]

  @@map("layer")
}

// Principle table: Contains principles linked to specific layers and questions
model Principle {
  id               Int             @id @default(autoincrement())
  name             String
  //order            Int             // Order of importance within a layer
  weight           Float           @default(0)
  layer            Layer           @relation(fields: [layerId], references: [id])
  layerId          Int
  questions        Question[]

  @@map("principle")
}

// Question table: Contains primary questions linked to principles and evaluations
model Question {
  id               Int             @id @default(autoincrement())
  number            Int             // Order or number of the question
  text             String          // Question content
  principle        Principle       @relation(fields: [principleId], references: [id])
  principleId      Int
  subQuestions     SubQuestion[]

  @@map("question")
}

// SubQuestion table: Represents sub-questions associated with a main question
model SubQuestion {
  id               Int             @id @default(autoincrement())
  text             String          @default("")// Sub-question content
  type             String    // Type of sub-question: Score, Choice, Open
  mainQuestion     Question        @relation(fields: [questionId], references: [id])
  questionId       Int
  answers          Answer[]

  @@map("subquestion")
}

// // Enum for question types
// enum QuestionType {
//   SCORE
//   CHOICE
//   OPEN
// }

// Answer table: Holds answers for sub-questions within evaluations
model Answer {
  id               Int             @id @default(autoincrement())
  score            Float           @default(0)
  response         String          @default("") // User's answer text
  evaluation       Evaluation      @relation(fields: [evaluationId], references: [id])
  evaluationId     Int
  subQuestion      SubQuestion     @relation(fields: [subQuestionId], references: [id])
  subQuestionId    Int             @default(0)

  @@map("answer")
}

